---
title: "pig project"
format: 
  pdf:
    # Page size & margins
    papersize: a4
    geometry:
      - margin=20mm        # or 25mm
      # - landscape        # uncomment for landscape
    # Fonts (optional, helps with unicode like α, β)
    pdf-engine: xelatex
    mainfont: "Lucida Grande"
    toc: true
    toc-title: Contents

editor: visual
---

## Abstract (Project)

This quarto document captures the whole data analysis from my pig project. It starts with standard analysis of the metagenomic microbiome dataset ($\alpha$**,** $\beta$ **diversity plots, abundance plots, NMDS plots**) to describe and visualize the dataset.

We continued analyzing species in the metagenome which are non significantly different among pig workers and pigs using differential abundance analysis approach. Further a control group (metagenomes from danish people) was introduced in order to look for species of interesting, assuming that shared species between pigs and pig workers are not found in the control group (**Volcano plot**). In order to further narrow the species of interest, we searched for the core microbiome between all three study groups. The overlap between non-significant species (**Venn-Diagram**) and core members between the pig and ctrl worker, which are also not present in the ctrl group were declared as **species of interest**.

Later those species are analysed on the strain-level in order to detect strain sharing events using **StrainPhlAn-trees** and **nGD (next genetic distance)** plots.

## Overview Quarto-File

-   `utils.R` -file: reusable functions are stored
-   

## Data

-   MF_SGB_abundance.txt

-   MF_abundance.txt

-   20_Clades_list_vJan25.txt

-   matadata_samples.csv

    -   Sample-Name

    -   stage

    -   farm number

    -   animal

    -   combined stage and farmnumber

## Dependencies

`utils.R` **-script**

```{r}
source("utils.R")
```

**for Phyloseq, Desq2, Barplots, Ordination analysis**

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: hide


#devtools::install_github("gmteunisse/fantaxtic")
#devtools::install_github("gmteunisse/ggnested")
library(tidyverse)
library(BiocManager)
library(phyloseq)
library(ggnested)
library(fantaxtic)
library(magrittr)
library(knitr)
library(gridExtra)
library(ggplot2)
library(goeveg) # scree plot NMDS
library(gplots) # for distance matrix
```

**for diversity calculations and Ordination analyis**

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: hide
library(microbiome)
library(vegan)
```

**for differential abundance analysis and volcano plots**

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: hide


library(ggrepel)
library(EnhancedVolcano)
library(dplyr)
library(DESeq2)
library(ggplot2)
library(tibble)
library(knitr)
```

**for Venn Diagrams**

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: hide


library(futile.logger)
library(grid)
library(VennDiagram)
```

**others**

```{r}
#| echo: true
#| message: false
#| warning: false
#| results: hide

library(stringr)
library(pheatmap)
library(microViz)
```

## Load data

```{r}
# metaphlan raw read data (MF_SGB_abundance.txt)
metaphlanData <- read.table("../data/raw/MF_SGB_abundance.txt", header = TRUE, sep = "")
metaphlanData$clade_name <- as.character(metaphlanData$clade_name)
metaData <- read.table("../metadata/metadata_samples.csv", header = TRUE, sep = ",")

# metaphlan percent data (MF_SGB_percent.txt)
metaphlanData_percent <- read.table("../data/raw/MF_SGB_percent.txt", header = TRUE, sep = "", row.names = 1)

# name the rows according to the sample names
rownames(metaData) <- metaData$Sample_name

# assigns 0 to all NA's
metaphlanData[is.na(metaphlanData)] <- 0
```

## Phyloseq Object

```{r}
meta_physeq <- metaphlan_to_phyloseq(metaphlanData, metaData, version = 4, verbose = TRUE, tax_lvl = "SGB")

ps <- meta_physeq
ps <- subset_taxa(ps, Kingdom !="UNKNOWN") # remove the unknowns

#View(ps@tax_table@.Data)

ps@tax_table@.Data <- substring(ps@tax_table@.Data, 4)
taxa_names(ps) <- substring(taxa_names(ps), 4)
colnames(ps@tax_table@.Data)<- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species", "SGB")


```

## Filter Phyloseq Object globally

```{r}
ps_filtered <- filter_species_by_group_prevalence(
  ps = ps,
  min_count = 10,
  min_prevalence = 0.1,
  group_var = "animal"
)


ps <-  ps_filtered
```

save filtered phyloseq object:

```{r}
saveRDS(ps,"../data/processed/ps.Rdata")
```

## Relative abundance - Barplots

### Top 10 Species (SGB)

```{r}
# filter for top species and define tax_level
top.ps <- fantaxtic::top_taxa(ps, tax_level = "SGB", n_taxa = 10)
top.ps <- top.ps$ps_obj

# top 10 species overall barplot
p_top10 <- plot_nested_bar(top.ps, top_level = "Phylum", nested_level = "SGB") +
  theme(text = element_text(size = 10))
print(p_top10)
  
  
# top 10 species wrapped among stage
p_top10_stage <- plot_nested_bar(top.ps, top_level = "Phylum", nested_level = "SGB") +
  theme(text = element_text(size = 10))+
  facet_wrap(~stage, scales = "free_x")+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  theme(text = element_text(size = 10))
print(p_top10_stage)

# top 10 species wrapped ctrl, pig, pigworkers
p_top10_animal <- plot_nested_bar(top.ps, top_level = "Phylum", nested_level = "SGB") +
  theme(text = element_text(size = 10))+
  facet_wrap(~animal, scales = "free_x")+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  theme(text = element_text(size = 10))
print(p_top10_animal)
```

### Top 20 Species (SGB)

```{r}
# filter for top 20 species and define tax_lavel
top.ps <- fantaxtic::top_taxa(ps, tax_level = "SGB", n_taxa = 20)
top.ps <- top.ps$ps_obj

# top 20 species overall barplot
p_top20 <- plot_nested_bar(top.ps, top_level = "Phylum", nested_level = "SGB")
print(p_top20)

# top 20 species wrapped among stage
p_top20_stage <- plot_nested_bar(top.ps, top_level = "Phylum", nested_level = "SGB")+
  theme(text = element_text(size = 10))+
  facet_wrap(~stage, scales = "free_x")+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  theme(text = element_text(size = 10))
print(p_top20_stage)

# top 20 species wrapped ctrl, pig, pigworkers
p_top20_animal <- plot_nested_bar(top.ps, top_level = "Phylum", nested_level = "SGB")+
  theme(text = element_text(size = 10))+
  facet_wrap(~animal, scales = "free_x")+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))+
  theme(text = element_text(size = 10))
print(p_top20_animal)
```

## Diversity measures

### $alpha$ diversity

using shannon-diversity index in order to calculate $alpha$ diversity. Thus, we have to manipulate the data, so that we have proportions and not percentages and transpose the data in order to get a vector per sample and not a vector per species.

```{r}
# data manipulation
data_prop <- metaphlanData_percent / 100
data_prop_t <- t(data_prop)

# shannon diversity index calculation
shannon <- diversity(data_prop_t, index = "shannon")
observed_species <- rowSums(data_prop_t > 0)

# data frame for alpha diversity plot
alpha_diversity <- data.frame(
  sample = rownames(data_prop_t),
  shannon = shannon,
  observed_species = observed_species,
  stage = tolower(str_extract(rownames(data_prop_t), "^[a-zA-Z]")),
  farm_number = str_extract(rownames(data_prop_t), "(?<=^[a-zA-Z])\\d+"),
  species = if_else(str_detect(rownames(data_prop_t), "pp"), "pig",
                    if_else(str_detect(rownames(data_prop_t), "X"), "ctrl", "human"))
  )

```

$alpha$ diversity violin plots

-   A: pigs / pig workers / ctrls

-   B: pigs per stage

```{r}
# plot A: pig / pig workers / ctrls
plot_alpha_A <- ggplot(
  data = alpha_diversity, 
  aes(x = species, y = shannon, fill = species))+
    geom_violin(trim = FALSE, alpha = 0.5, position = "dodge")+
    geom_boxplot(width = 0.1, outlier.shape = NA, fill = "grey", notch= TRUE)+
  scale_fill_manual(values = c("aquamarine", "darkgoldenrod3", "grey"))+
  theme_minimal()

plot(plot_alpha_A)

# plot B: pigs per stage

plot_alpha_B <- alpha_diversity %>%
  filter(species == "pig") %>%
  ggplot(
    aes(x = factor(stage, levels = c("s", "w", "f")),y = shannon, fill = stage))+
    geom_violin(trim = FALSE, color = NA, alpha = 0.6 )+
    geom_boxplot(width = 0.1, outlier.shape = NA, fill = "grey", notch = TRUE)+
    scale_fill_manual(values = c("s" = "purple","w" = "darkslategrey", "f" = "gold"))+
    scale_x_discrete(labels = c("suckling pigs", "weaning pigs", "fattening pigs"))+
    theme_minimal()+
    labs(x = "", y = "Shannon diversity index (H)", title = "alpha diversity of suckling, weanig and fattening pigs")

plot(plot_alpha_B)
```

### Ordination analysis - NMDS for $beta$ diversity

-   AIM: move point along 2D scale, using optimization algorithm. Does not assume a linear relationship in our data (so I do not draw lines perpendicular to each other) but I actually tell the algorithm, how many dimensions I want (2 dimensions). The algorithm just takes all data points and puts them in a 2D-grid, doing an optimization.
-   need of a **bray-curtis distance** matrix
-   ordination in general just shows **clusters** in our data

#### ordination analysis based on phyloseq object (abundance based)

```{r}
# convert phyloseq object to compositional data (using microbiome package)
pseq.rel <- microbiome::transform(ps, "compositional")

# get distance matrix 
dist <- phyloseq::distance(pseq.rel, method = "bray")

# ordinate the data
set.seed(4235421)
nmds <- metaMDS(dist, k = 2, trymax = 100)

#NMDS-Plot
plot_NMDS <- plot_ordination(pseq.rel, nmds, color = "animal") +
  geom_point(size = 1.2)+
  theme_minimal()+
  theme(axis.text.y = element_text(size = 3))
print(plot_NMDS)

# stress plot
stressplot(nmds)

```

#### ordination based on vegan package (percent based)

```{r}
# calculate distance matrix (bray-curtis)
# metaphlanData_percent table has to be transposed in order that species samples are rows and species are columns.

dist_matrix <- vegdist(t(metaphlanData_percent), method = "bray")

# ordinate the data
set.seed(12)
nmds <- metaMDS(dist_matrix, k = 2, trymax = 100)


# get scores from the vegan package
scores_nmds <- scores(nmds)
plot(scores(nmds))


# adapt metadata table
metaData_2 <- metaData%>%
  tibble::rownames_to_column(var = "Sample_ID")

# make a data frame
nmds_plot <- scores_nmds %>%
  as_tibble(rownames = "Sample_ID")%>%
  inner_join(., metaData_2, by = "Sample_ID", copy = TRUE)%>%
  ggplot(aes(x = NMDS1, y = NMDS2, color = animal))+
  geom_point()+
  theme_minimal()

plot(nmds_plot)


# stress plot
stressplot(nmds)
```

the function `screeplot_NMDS` is not applicable since we do not produce eigenvalues and eigenvectors as we do in PCA or PCoA.

But this plot should show, how stress decreases as the number of NMDS dimensions increases - similar as in PCA.

Interpretation:

-   stress-value \< 0.05 is en excellent fit

-   stress-value \< 0.1 is good

-   stress-value \< 0.2 is acceptable

```{r}
# Test stress for 1 to 6 dimensions
stress_vals <- sapply(1:6, function(k) {
  set.seed(123)
  nmds <- metaMDS(dist_matrix, k = k, trymax = 20, trace = FALSE)
  nmds$stress
})

# Plot stress vs. dimensions
plot(1:6, stress_vals, type = "b", pch = 19, frame = FALSE,
     xlab = "Number of Dimensions (k)", ylab = "Stress",
     main = "Stress Plot (like Screeplot for NMDS)")
abline(h = 0.2, col = "red", lty = 2)  # Optional threshold line

# source: adapted from ChatGPT4.0
```

#### bray-curtis distance matrix

```{r}
heatmap.2(as.matrix(dist_matrix),
          trace = "none",
          density.info = "none",
          key = TRUE,
          main ="Bray-Curtis-Distancematrix",
          col = colorRampPalette(c("darkred", "orange", "yellow"))(100))
```

## Differential abundance Analysis

-   remove all NA, in order DESeq2 will work

```{r}
otu <- otu_table(ps)
otu[is.na(otu)] <- 0

otu_table(ps) <- otu_table(otu, taxa_are_rows = TRUE)

#check if no NA value is lost ?
assertthat::assert_that(!any(is.na(otu_table(ps))))

# -- FALSE: any NA exists
# -- TRUE: no NA exists
```

run DESeq2: set reference first to *WORKER* in order to make the following comparisons:

-   A: PIG / WORKER

-   B: CTRL / WORKER

```{r}
# aggregate species level -> useful when we want to aggregate not on the lowest taxonomy level
phy_species <- tax_glom(ps, taxrank = "SGB" )

# force animal to be a factor explicitly
sample_data(phy_species)$animal <- as.factor(sample_data(phy_species)$animal)

# add a pseudocount of +1 (eliminate of 0 which causes problems and NA-values)
otu_table(phy_species) <- otu_table(otu_table(phy_species)+1)

# start differential abundance
dds <- phyloseq_to_deseq2(phy_species, ~animal)
dds$animal <- relevel(dds$animal, ref = "worker")  # set 'worker' as the baseline
dds <- DESeq(dds, sfType = "poscounts")
```

the analysis consist of mainly three plots:

1.  Volcano Plot

2.  MA-Plot with baseMean data

    very similar to volcano plot but instead of showing the x-axis we show

3.  Volcano plot with species of interest (depending on the comparison we are looking at).

### A: PIG / WORKER

this is the main comparison in our analysis. We assume (also based on the ordination analysis aka $bata$ diversity measure) that we see a difference in clustering of pig and worker samples. Thus, there have to be microbial species in either of both hosts driving this significant difference. In order to visualize which species are significantly different between both hosts, we use differential abundance analysis. This results in a volcano plot, where all red species are significantly different between both hosts, while the black species are not.

#### Volcano Plot

```{r}
res_human_vs_pig <- results(dds, contrast = c("animal", "pig", "worker"))

# merge with taxonomy
res_df_human_vs_pig <- as.data.frame(res_human_vs_pig)
res_df_human_vs_pig$SGB <- rownames(res_df_human_vs_pig)


tax <- as.data.frame(tax_table(phy_species))
tax$SGB <- rownames(tax)

res_merged <- merge(res_df_human_vs_pig, tax, by = "SGB")

volcano_human_pig <- exp_volcano(res_merged, "Pigs vs. workers")
volcano_human_pig + xlab(expression(Log[2]~"FoldChange (Pig vs. Worker)"))
```

#### MA-Plot

```{r}
# add a significance level
res_df_human_vs_pig <- res_df_human_vs_pig %>%
  mutate(significance = case_when(
    padj < 0.05 & abs(log2FoldChange) >= 1 ~ "Significant",
    TRUE ~ "Not Significant"
  ))
# plot with base mean
ggplot(data = res_df_human_vs_pig, aes(y = log10(baseMean), x = log2FoldChange, color = significance)) +
  geom_point(alpha = 0.8) +
  scale_color_manual(values= c("Significant" = "grey", "Not Significant" = "black"))+
  labs(
    title = "Base Mean vs Log2 Fold Change (Workers vs Pigs)", 
    x = "Log2 Fold Change", 
    y = "Base Mean")+
  theme_minimal()
```

#### Species of interest
